#!/usr/bin/env python

from embodied_ising import ising,bool2int
import numpy as np
import matplotlib.pyplot as plt
from infoflow import MI,Imin,TE,TE1,Entropy,ConditionalEntropy
import time

size=12
Nsensors=4
Nmotors=2
ind=3

d=3
beta=1

Iterations=1000
T=1000
visualize=True
#visualize=False

mode='critical'
#mode='predictive'
#mode='random'
#mode='surrogate'
#mode=None

I=ising(size,Nsensors,Nmotors)
I.Beta=beta

filename='files/'+mode+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'.npz'


if mode=='critical' or mode=='predictive':
	data=np.load(filename)
	I.h=data['h']
	I.J=data['J']
elif mode=='surrogate':
#	ind0=np.random.randint(10)
	filename='files/'+'critical'+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'.npz'
	data=np.load(filename)
	h0=data['h']
	J0=data['J']
	for i in range(size):
		i0=np.random.randint(size)
		I.h[i]=h0[i0]
		for j in np.arange(i+1,size):
			i0=np.random.randint(size)
			j0=np.random.randint(size)
			while J0[i0,j0]==0:
				i0=np.random.randint(size)
				j0=np.random.randint(size)
#				print(i,j,i0,j0)
			I.J[i,j]=J0[i0,j0]
else:
	I.h=(np.random.rand(I.size)*2-1)*5
	for i in range(size):
		for j in np.arange(i+1,size):
			if j>=Nsensors:
				I.J[i,j]=(np.random.rand(1)*2-1)*5



plt.figure()
plt.bar(range(size),I.h)
plt.figure()
plt.imshow(I.J,interpolation='nearest')
plt.colorbar()


T=size*20000
p=np.zeros(T)
s=np.zeros(T)
m=np.zeros(T)
a=np.zeros(T)
acc=np.zeros(T)
spd=np.zeros(T)
pos=np.zeros(T)
theta=np.zeros(T)
P=np.zeros(2**size)

I.randomize_state()
I.randomize_position()
I.env.reset()

T0=10000
for t0 in range(T0):
	I.SequentialUpdate()
	
	
t=0
#I.env.state = I.env.np_random.uniform(low=-np.pi, high=np.pi, size=(4,))
while(t<T):
#	if t%(T/10)==0:
#		I.randomize_position()
#for i in range(T):
	for i in np.random.permutation(I.size):
		if t<T:
			I.Update(i)
			s[t]=I.get_state_index('sensors')
			p[t]=I.observation[0]
			a[t]=I.get_state_index()
			m[t]=I.get_state_index('motors')
			acc[t]=I.theta1_dot2
			theta[t]=I.theta
#			spd[t]=I.speed
#			pos[t]=I.env.state[0]
			n=I.get_state_index()
			
			P[n]+=1
			t+=1
	if visualize:
		I.env.render()
		time.sleep(0.01) 
	
print(Entropy(s))
print(MI(s,m))

P/=np.sum(P)

order=np.argsort(P)[::-1]
r=np.arange(1,2**I.size+1)
plt.figure()
plt.loglog(r,P[order])
Psf = 1.0/(1+np.arange(2**size))
Psf/=np.sum(Psf)
plt.loglog(r,Psf,'--g')


plt.show()
exit()

