#!/usr/bin/env python

from ising import ising
import numpy as np
import matplotlib.pyplot as plt

size=15
steps=100
T=200

x=ising(size)
x.h=np.random.randn(size)*0.3
x.J=np.zeros((size,size))


x.HC=0
x.pdf()
P=x.P.copy()
order=np.argsort(P)[::-1]

r=np.arange(1,2**size+1)
Psf = 1.0/(1+np.arange(2**size))
Psf/=np.sum(Psf)

plt.figure()
plt.loglog(r,P[order])
plt.loglog(r,Psf)
plt.title('Probability density function before learning')


for rep in range(steps):
	x.CriticalLearningStep(T)
	if rep%1==0:
		print(rep, x.HC)

x.energy()
x.HeatCapacity()


x.pdf()
P=x.P.copy()
order=np.argsort(P)[::-1]

plt.figure()
plt.loglog(r,P[order])
plt.loglog(r,Psf)
plt.title('Probability density function after learning')

plt.figure()
plt.imshow(x.J,interpolation='nearest')
plt.colorbar()
plt.title('Connectivity matrix')

print(x.HC)
print(x.h)
print(x.J)


r=np.arange(-1,1,0.05)
HC=np.zeros(len(r))
H=np.zeros(len(r))
for i,r1 in enumerate(r):
	x.Beta=10.0**r1
	x.energy()
	x.HeatCapacity()
	HC[i] = x.HC
	H[i]=x.Beta*x.Em + np.log(x.Z)


plt.figure()
plt.semilogx(10**-r,H)
plt.ylabel(r'$H\qquad$',rotation=0, fontsize=20)
plt.xlabel(r'$T$', fontsize=15)
plt.title('Entropy of the network after system for different temperatures')

plt.figure()
plt.semilogx(10**-r,HC)
plt.ylabel(r'$C\qquad$',rotation=0, fontsize=20)
plt.xlabel(r'$T$', fontsize=15)
plt.title('Heat capacity of the network after system for different temperatures')

#plt.figure()
#plt.hist(x.h, 5, normed=1, alpha=0.75)
#W=[]
#for i in range(size):
#	for j in np.arange(i+1,size):
#		W+=[x.J[i,j]]
#plt.figure()
#plt.hist(W, 10, normed=1, alpha=0.75)

plt.show()
