#!/usr/bin/env python

from ising import ising
import numpy as np
import matplotlib.pyplot as plt

size=10


x=ising(size)
x.h=np.random.randn(size)*0.1
x.J=np.zeros((size,size))

steps=200
T=100
T1=10000

X=np.zeros((size,T1))

x.randomize_state()
print(x.s)


for t in range(T1):
		x.SequentialGlauberStep()
		X[:,t]=x.s


plt.figure()
plt.imshow(X, aspect='auto',interpolation='nearest')
plt.title('simulation of the network before learning')
plt.ylabel('neuron')
plt.xlabel('time')


x.HC=0
#x.pdf()
#P=x.P.copy()
#order=np.argsort(P)[::-1]

#r=np.arange(1,2**size+1)
#Psf = 1.0/(1+np.arange(2**size))
#Psf/=np.sum(Psf)

#plt.figure()
#plt.loglog(r,P[order])
#plt.loglog(r,Psf)




for rep in range(steps):
	x.CriticalLearningStep(T)
	if rep%1==0:
		print(rep, x.HC)


X=np.zeros((size,T1))

x.randomize_state()
print(x.s)


for t in range(T1):
		x.SequentialGlauberStep()
		X[:,t]=x.s


plt.figure()
plt.imshow(X, aspect='auto',interpolation='nearest')
plt.title('simulation of the network after learning')
plt.ylabel('neuron')
plt.xlabel('time')
plt.show()
