#!/usr/bin/env python

from embodied_ising import ising,bool2int,TSE
import numpy as np
import matplotlib.pyplot as plt
from infoflow import MI,Imin,TE,TE1,Entropy,ConditionalEntropy


size=12
Nsensors=6
Nmotors=2

Iterations=1000
T=5000

mode='critical'
#mode='predictive'
#mode='random'
#mode='surrogate'
#mode=None

Nbetas=21
betas=10**np.linspace(-1,1,Nbetas)

for ind in range(10):
	for bind in range(Nbetas):

		I=ising(size,Nsensors,Nmotors)
		beta=betas[bind]
		I.Beta=beta
		print(ind,beta)
	

		filename='files/'+mode+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'.npz'


		if mode=='critical' or mode=='predictive':
			data=np.load(filename)
			I.h=data['h']
			I.J=data['J']
		elif mode=='surrogate':
			filename='files/'+'critical'+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'.npz'
			data=np.load(filename)
			h0=data['h']
			J0=data['J']
			for i in range(size):
				i0=np.random.randint(size)
				I.h[i]=h0[i0]
				for j in np.arange(i+1,size):
					i0=np.random.randint(size)
					j0=np.random.randint(size)
					while J0[i0,j0]==0:
						i0=np.random.randint(size)
						j0=np.random.randint(size)
					I.J[i,j]=J0[i0,j0]
		else:
			I.h=(np.random.rand(I.size)*2-1)*I.max_weights
			for i in range(size):
				for j in np.arange(i+1,size):
					if j>=Nsensors:
						I.J[i,j]=(np.random.rand(1)*2-1)*I.max_weights

		steps=1000000
		s=np.zeros(steps,int)
		spd=np.zeros(steps)
		pos=np.zeros(steps)
		P=np.zeros(2**size)

		I.randomize_position()
		steps0=int(steps/10)
		for t in range(steps0):
			I.SequentialUpdate()
	
		t=0
		for t in range(steps):
				I.SequentialUpdate()
				n=I.get_state_index()
				s[t]=n
				spd[t]=I.speed
				pos[t]=I.env.state[0]
			
				P[n]+=1

		P/=np.sum(P)

		filename='/home/maguilera/Desktop/MountainCar-data/series-temp/series-'+mode+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'-beta_'+str(beta)+'.npz'
		np.savez(filename,s=s,pos=pos,spd=spd,P=P)
