#!/usr/bin/env python

from embodied_ising import ising,bool2int,TSE
import numpy as np
import matplotlib.pyplot as plt
from infoflow import MI,Imin,TE,TE1,Entropy,ConditionalEntropy
from itertools import combinations

plt.rc('text', usetex=True)
font = {'family':'serif','size':12, 'serif': ['computer modern roman']}
plt.rc('font',**font)
plt.rc('legend',**{'fontsize':16})

size=12
Nsensors=6
Nmotors=2
ind=0

d=3
beta=4
Iterations=1000
T=5000
visualize=True
visualize=False

mode='critical'
#mode='predictive'
#mode='random'
#mode='surrogate'
#mode=None

I=ising(size,Nsensors,Nmotors)
I.Beta=beta



filename='files/'+mode+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'.npz'


if mode=='critical' or mode=='predictive':
	data=np.load(filename)
	I.h=data['h']
	I.J=data['J']
elif mode=='surrogate':
	filename='files/'+'critical'+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(ind)+'.npz'
	data=np.load(filename)
	h0=data['h']
	J0=data['J']
	for i in range(size):
		i0=np.random.randint(size)
		I.h[i]=h0[i0]
		for j in np.arange(i+1,size):
			i0=np.random.randint(size)
			j0=np.random.randint(size)
			while J0[i0,j0]==0:
				i0=np.random.randint(size)
				j0=np.random.randint(size)
#				print(i,j,i0,j0)
			I.J[i,j]=J0[i0,j0]
else:
	I.h=(np.random.rand(I.size)*2-1)*5
	for i in range(size):
		for j in np.arange(i+1,size):
			if j>=Nsensors:
	
				I.J[i,j]=(np.random.rand(1)*2-1)*5


plt.figure()
plt.bar(range(size),I.h)
plt.figure()
plt.imshow(I.J,interpolation='nearest')
plt.colorbar()

#plt.show()
T=4000
p=np.zeros(T)
s=np.zeros(T)
m=np.zeros(T)
h=np.zeros(T)
a=np.zeros(T)
spins=np.zeros((size,T))
acc=np.zeros(T)
spd=np.zeros(T)
pos=np.zeros(T)

nsize=size
combs=list(combinations(range(nsize),int(nsize/2)))
ncombs=int(len(combs)/2)
nc1=np.zeros((ncombs,T))
nc2=np.zeros((ncombs,T))

P=np.zeros(2**size)

#I.randomize_position()
I.env.reset()
#I.env.render()
#import time
#for i in range(30):
#	print(30-i)
#	time.sleep(1)
T0=10000
heigth=np.zeros(T0)
for t in range(T0):
	I.SequentialUpdate()
	heigth[t]=I.height
#	I.env.render()
	
#I.env.state=np.array([0, 0])
#I.observation = np.array(I.env.state)
#x.safemode=True
#x.Update(0)
t=0
for t in range(T):
	I.SequentialUpdate()
	s[t]=I.get_state_index('sensors')
	a[t]=I.get_state_index('non-sensors')
	h[t]=I.get_state_index('hidden')
	m[t]=I.get_state_index('motors')
	acc[t]=I.acceleration
	spd[t]=I.speed
	pos[t]=I.env.state[0]
	n=I.get_state_index()
	spins[:,t]=(I.get_state()+1)*0.5
	spin=I.get_state()
#	for ic in range(ncombs):
#		bp1=list(combs[ic])
#		bp2=list(set(range(nsize)) - set(combs[ic]))
#		nc1[ic,t]=bool2int(0.5*(spin[bp1]+1))
#		nc2[ic,t]=bool2int(0.5*(spin[bp2]+1))
		
			
	P[n]+=1
	if visualize:
		I.env.render()

P/=np.sum(P)

Esize=6
pos_dig=np.digitize(pos,np.linspace(np.min(pos)*1.02,np.max(pos)*1.02,2**(Esize/2)))
spd_dig=np.digitize(spd,np.linspace(np.min(spd)*1.02,np.max(spd)*1.02,2**(Esize/2)))
E=pos_dig+spd_dig*2**3


if beta==1:
	letter='b'
elif beta<1:
	letter='a'
else:
	letter='c'
fig, ax = plt.subplots(1,1,figsize=(4,4))
plt.rc('text', usetex=True)
plt.plot(pos,spd,'k')
plt.ylabel(r'$v$',fontsize=18, rotation=0)
plt.xlabel(r'$x$',fontsize=18)
plt.title(r'$\beta='+str(beta)+'$',fontsize=36)
plt.axis([-1.6,0.2,-0.06,0.06])
plt.savefig('/home/maguilera/Dropbox/ISAAC/cogsci2017/img/fig4'+letter+'.pdf',bbox_inches='tight')

fig, ax = plt.subplots(1,1,figsize=(4,2))
plt.rc('text', usetex=True)
plt.plot(pos,'k')
plt.ylabel(r'$x$',fontsize=18, rotation=0)
plt.xlabel(r'$t$',fontsize=18)
plt.savefig('/home/maguilera/Dropbox/ISAAC/cogsci2017/img/fig4'+letter+'1.pdf',bbox_inches='tight')



plt.show()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot(pos,spd,acc)

sm=m+s*2**Nmotors
hm=m+h*2**Nmotors

plt.show()
exit()
