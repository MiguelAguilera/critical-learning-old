#!/usr/bin/env python

from embodied_ising import ising,bitfield
import numpy as np
import matplotlib.pyplot as plt
from infoflow import MI,TE,Entropy


size=8
Nsensors=4
Nmotors=1
visualize=True

I=ising(size,Nsensors,Nmotors)

I.random_fields(std=0.01)
I.J[0:Nsensors,Nsensors:size]=np.random.randn(Nsensors,size-Nsensors)*0.01

Iterations=100
T=1000

I.CriticalLearning(Iterations,T,mode='dynamic')


T=40000
p=np.zeros(T)
s=np.zeros(T)
m=np.zeros(T)
a=np.zeros(T)
acc=np.zeros(T)
P=np.zeros(2**size)
t=0
I.randomize_position()
while(t<T):
	for i in np.random.permutation(I.size):
		if t<T:
			I.Update(i)
			s[t]=I.get_state_index('sensors')
			p[t]=I.observation[0]
			a[t]=I.observation[1]
			m[t]=I.get_state_index('motors')
			n=I.get_state_index()
			P[n]+=1
			t+=1
	if visualize:
		I.env.render()

P/=np.sum(P)

plt.figure()
plt.hist(a,20)



Tsub=2000
i=np.random.randint(T-Tsub)
plt.figure()
plt.subplot(311)
plt.plot(p[i:i+Tsub])
plt.subplot(312)
plt.plot(s[i:i+Tsub])
plt.subplot(313)
plt.plot(m[i:i+Tsub])

order=np.argsort(P)[::-1]
r=np.arange(1,2**I.size+1)
plt.figure()
plt.loglog(r,P[order])

Psf = 1.0/(1+np.arange(2**size))
Psf/=np.sum(Psf)
plt.loglog(r,Psf,'--g')


plt.figure()
plt.bar(range(size),I.h)
plt.figure()
plt.imshow(I.J,interpolation='nearest')
plt.colorbar()
plt.figure()
plt.hist(p, 10, normed=1, facecolor='green', alpha=0.75)

print(m)
print(s)

rs=np.unique(np.round(2**np.arange(0,10.5,0.5)).astype(int))
TEms=np.zeros(len(rs))
TEsm=np.zeros(len(rs))
for i,r in enumerate(rs):
	TEms[i]=TE(m,s,r)
	TEsm[i]=TE(s,m,r)
print('mean TEms',np.mean(TEms))
print('mean TEsm',np.mean(TEsm))
print('combined mean',0.5*np.mean(TEsm+TEms))

plt.figure()
plt.semilogx(rs,TEms,'--r',linewidth=1.5,label='m->s')
plt.semilogx(rs,TEsm,'--b',linewidth=1.5,label='s->m')
plt.legend()

plt.show()



