#!/usr/bin/env python

from embodied_ising import ising,bitfield
import numpy as np
from infoflow import MI,TE,Entropy
from sys import argv


if len(argv) < 8:
    print("Usage: " + argv[0] + " <network size>" + " <number of sensors>" + " <number of motors>"  + " <Simulation time>"  " <Number of iterations>"  + " <mode>"+ " <Number of repetitions>" )
    exit(1)

size=int(argv[1])
Nsensors=int(argv[2])
Nmotors=int(argv[3])
T=int(argv[4])
Iterations=int(argv[5])
mode=argv[6]
repetitions=int(argv[7])


for rep in range(repetitions):
	I=ising(size,Nsensors,Nmotors)
	I.random_fields(0.01)
	I.J[0:Nsensors,Nsensors:size]=(np.random.rand(Nsensors,size-Nsensors)*2-1)*0.01
	print(mode)
	if mode=='critical':
		I.CriticalLearning(Iterations,T,mode='dynamic')
	elif mode=='predictive':
		I.BoltzmannLearning(Iterations,T)
	else:
	    print("Usage: " + argv[0] + " <network size>" + " <number of sensors>" + " <number of motors>"  + " <Simulation time>"  " <Number of iterations>"  + " <mode>"+ " <Number of repetitions>" )
	    print("<mode> has to be defined as 'critical' or 'predictive'")

	filename='files/'+mode+'-model-size_'+str(size)+'-sensors_'+str(Nsensors)+'-motors_'+str(Nmotors)+'-T_'+str(T)+'-Iterations_'+str(Iterations)+'-ind_'+str(rep)+'.npz'
	np.savez(filename, J=I.J, h=I.h)
